# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, online: bool=None, ip: str=None, port: int=None, debug: object=None, motd: object=None, players: object=None, version: str=None, protocol: int=None, hostname: str=None, icon: str=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param online: The online of this InlineResponse200.  # noqa: E501
        :type online: bool
        :param ip: The ip of this InlineResponse200.  # noqa: E501
        :type ip: str
        :param port: The port of this InlineResponse200.  # noqa: E501
        :type port: int
        :param debug: The debug of this InlineResponse200.  # noqa: E501
        :type debug: object
        :param motd: The motd of this InlineResponse200.  # noqa: E501
        :type motd: object
        :param players: The players of this InlineResponse200.  # noqa: E501
        :type players: object
        :param version: The version of this InlineResponse200.  # noqa: E501
        :type version: str
        :param protocol: The protocol of this InlineResponse200.  # noqa: E501
        :type protocol: int
        :param hostname: The hostname of this InlineResponse200.  # noqa: E501
        :type hostname: str
        :param icon: The icon of this InlineResponse200.  # noqa: E501
        :type icon: str
        """
        self.swagger_types = {
            'online': bool,
            'ip': str,
            'port': int,
            'debug': object,
            'motd': object,
            'players': object,
            'version': str,
            'protocol': int,
            'hostname': str,
            'icon': str
        }

        self.attribute_map = {
            'online': 'online',
            'ip': 'ip',
            'port': 'port',
            'debug': 'debug',
            'motd': 'motd',
            'players': 'players',
            'version': 'version',
            'protocol': 'protocol',
            'hostname': 'hostname',
            'icon': 'icon'
        }
        self._online = online
        self._ip = ip
        self._port = port
        self._debug = debug
        self._motd = motd
        self._players = players
        self._version = version
        self._protocol = protocol
        self._hostname = hostname
        self._icon = icon

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def online(self) -> bool:
        """Gets the online of this InlineResponse200.


        :return: The online of this InlineResponse200.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online: bool):
        """Sets the online of this InlineResponse200.


        :param online: The online of this InlineResponse200.
        :type online: bool
        """

        self._online = online

    @property
    def ip(self) -> str:
        """Gets the ip of this InlineResponse200.


        :return: The ip of this InlineResponse200.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this InlineResponse200.


        :param ip: The ip of this InlineResponse200.
        :type ip: str
        """

        self._ip = ip

    @property
    def port(self) -> int:
        """Gets the port of this InlineResponse200.


        :return: The port of this InlineResponse200.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this InlineResponse200.


        :param port: The port of this InlineResponse200.
        :type port: int
        """

        self._port = port

    @property
    def debug(self) -> object:
        """Gets the debug of this InlineResponse200.


        :return: The debug of this InlineResponse200.
        :rtype: object
        """
        return self._debug

    @debug.setter
    def debug(self, debug: object):
        """Sets the debug of this InlineResponse200.


        :param debug: The debug of this InlineResponse200.
        :type debug: object
        """

        self._debug = debug

    @property
    def motd(self) -> object:
        """Gets the motd of this InlineResponse200.


        :return: The motd of this InlineResponse200.
        :rtype: object
        """
        return self._motd

    @motd.setter
    def motd(self, motd: object):
        """Sets the motd of this InlineResponse200.


        :param motd: The motd of this InlineResponse200.
        :type motd: object
        """

        self._motd = motd

    @property
    def players(self) -> object:
        """Gets the players of this InlineResponse200.


        :return: The players of this InlineResponse200.
        :rtype: object
        """
        return self._players

    @players.setter
    def players(self, players: object):
        """Sets the players of this InlineResponse200.


        :param players: The players of this InlineResponse200.
        :type players: object
        """

        self._players = players

    @property
    def version(self) -> str:
        """Gets the version of this InlineResponse200.


        :return: The version of this InlineResponse200.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this InlineResponse200.


        :param version: The version of this InlineResponse200.
        :type version: str
        """

        self._version = version

    @property
    def protocol(self) -> int:
        """Gets the protocol of this InlineResponse200.


        :return: The protocol of this InlineResponse200.
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: int):
        """Sets the protocol of this InlineResponse200.


        :param protocol: The protocol of this InlineResponse200.
        :type protocol: int
        """

        self._protocol = protocol

    @property
    def hostname(self) -> str:
        """Gets the hostname of this InlineResponse200.


        :return: The hostname of this InlineResponse200.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname: str):
        """Sets the hostname of this InlineResponse200.


        :param hostname: The hostname of this InlineResponse200.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def icon(self) -> str:
        """Gets the icon of this InlineResponse200.


        :return: The icon of this InlineResponse200.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon: str):
        """Sets the icon of this InlineResponse200.


        :param icon: The icon of this InlineResponse200.
        :type icon: str
        """

        self._icon = icon
